name: Deploy to Docker Hub and EC2

on:
  push:
    branches:
      - main   # runs automatically on push to main
  workflow_dispatch: # also allow manual trigger

jobs:
  build:
    name: Build, Scan, and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Java (needed for SonarQube scanner)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # SonarQube Scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.projectKey=shubhekkumar_Web-CloudNexus-master
            -Dsonar.projectName=<your_org>
            -Dsonar.sources=.
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: shubheksam
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Build and push Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: shubheksam/prod-cn-website:latest

      # Trivy Security Scan
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: shubheksam/prod-cn-website:latest
          format: 'table'
          exit-code: '0'   # set to 1 if you want build to fail on vulnerabilities
          severity: 'CRITICAL,HIGH'

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Save SSH key
        run: |
          echo "${{ secrets.SSHKEY }}" > prod-cn-website.pem
          chmod 600 prod-cn-website.pem

      - name: SSH into EC2 and deploy container
        run: |
          ssh -o StrictHostKeyChecking=no -i "prod-cn-website.pem" ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "shubheksam" --password-stdin
          
            # Stop and remove old container
            docker stop prod-cn-website || true
            docker rm prod-cn-website || true
          
            # Pull latest image
            docker pull shubheksam/prod-cn-website:latest
          
            # Run new container (map port 8080 on host to port 80 in container)
            docker run -d --name prod-cn-website -p 8080:80 shubheksam/prod-cn-website:latest
          
            # Cleanup old images
            docker image prune -f
          EOF
